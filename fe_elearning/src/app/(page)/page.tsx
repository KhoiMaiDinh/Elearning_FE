"use client";
import "./page.css";
import CoursesBlock from "@/components/block/courses-block";
import InfoDashboard from "@/components/block/infoDashboard";
import LecturersBlock from "@/components/block/lecturers-block";
import { Button } from "@/components/ui/button";
import courseBlock from "@/types/coursesBlockType";
import lectureBlock from "@/types/lecturesBlockType";
import {
  ArrowRight,
  ArrowRightCircle,
  BookCheck,
  ChevronRight,
  Film,
  GraduationCap,
  Headset,
  IdCard,
  UsersRound,
} from "lucide-react";
import { useEffect, useState } from "react";
import SplitText from "@/components/text/splitText";
import FadeContent from "@/components/animations/fadeContent";
import { useRouter } from "next/navigation";
import AnimateWrapper from "@/components/animations/animateWrapper";
import { APIGetListLecture } from "@/utils/lecture";
import { APIGetListCourse } from "@/utils/course";
import BlurColor from "@/components/blurColor/blurColor";
import { CourseForm } from "@/types/courseType";
// const dataCourse = [
//   {
//     coverPhoto: "/images/course1.jpg",
//     avatar: "/images/avatar.jpg",
//     title: "L·∫≠p tr√¨nh ReactJS c∆° b·∫£n",
//     rating: 4.9,
//     level: "C∆° b·∫£n",
//     numberStudent: 1200,
//     description:
//       "Kh√≥a h·ªçc d√†nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu mu·ªën t√¨m hi·ªÉu v·ªÅ ReactJS.",
//     name: "Nguy·ªÖn VƒÉn A",
//     status: "Ch∆∞a ƒëƒÉng k√Ω",
//     progress: 45, // ƒê√£ ho√†n th√†nh 45% kh√≥a h·ªçc
//     price: 500000,
//     priceFinal: 450000, // Gi√° sau gi·∫£m
//   },
//   {
//     coverPhoto: "/images/course2.jpg",
//     avatar: "/images/avatar.jpg",
//     title: "Ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi Python",
//     rating: 4.8,
//     level: "Trung c·∫•p",
//     numberStudent: 800,
//     description:
//       "H·ªçc c√°ch ph√¢n t√≠ch d·ªØ li·ªáu v√† tr·ª±c quan h√≥a v·ªõi Python. T√¨m hi·ªÉu c√°ch x√¢y d·ª±ng ·ª©ng d·ª•ng di ƒë·ªông ƒëa n·ªÅn t·∫£ng v·ªõi Flutter hg r f r rkr rx s frf er e gre rg erg er g rgs g se sg egr e g erg e t eg rver g erg er g rv.",

//     name: "L√™ Th·ªã B",
//     status: "ƒêang h·ªçc",
//     progress: 50, // ƒê√£ ho√†n th√†nh kh√≥a h·ªçc
//     price: 700000,
//     priceFinal: 700000, // Kh√¥ng gi·∫£m gi√°
//   },
//   {
//     coverPhoto: "/images/course3.jpg",
//     avatar: "/images/avatar.jpg",
//     title: "Thi·∫øt k·∫ø giao di·ªán v·ªõi Figma",
//     rating: 4.7,
//     level: "C∆° b·∫£n",
//     numberStudent: 650,
//     description: "Kh√≥a h·ªçc cung c·∫•p ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ thi·∫øt k·∫ø UI/UX.",
//     name: "Tr·∫ßn Minh C",
//     status: "Ch∆∞a ƒëƒÉng k√Ω",
//     price: 400000,
//     priceFinal: 350000, // Gi√° sau gi·∫£m
//   },
//   {
//     coverPhoto: "/images/course4.jpg",
//     avatar: "/images/avatar.jpg",
//     title: "L·∫≠p tr√¨nh Backend v·ªõi Node.js",
//     rating: 4.6,
//     level: "N√¢ng cao",
//     numberStudent: 1550,
//     description: "N√¢ng cao k·ªπ nƒÉng l·∫≠p tr√¨nh backend v·ªõi Node.js v√† Express.",
//     name: "Ph·∫°m Duy D",
//     status: "Ch∆∞a ƒëƒÉng k√Ω",
//     progress: 60, // ƒê√£ ho√†n th√†nh 60% kh√≥a h·ªçc
//     price: 600000,
//     priceFinal: 500000, // Gi√° sau gi·∫£m
//   },
//   {
//     coverPhoto: "/images/course5.jpg",
//     avatar: "/images/avatar.jpg",
//     title: "Ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông v·ªõi Flutter",
//     rating: 4.9,
//     level: "Trung c·∫•p",
//     numberStudent: 1100,
//     description:
//       "T√¨m hi·ªÉu c√°ch x√¢y d·ª±ng ·ª©ng d·ª•ng di ƒë·ªông ƒëa n·ªÅn t·∫£ng v·ªõi Flutter hg r f r rkr rx s frf er e gre rg erg er g rgs g se sg egr e g erg e t eg rver g erg er g rv.",
//     name: "Ho√†ng VƒÉn E",
//     status: "Ch∆∞a ƒëƒÉng k√Ω",
//     progress: 100, // ƒê√£ ho√†n th√†nh kh√≥a h·ªçc
//     price: 800000,
//     priceFinal: 750000, // Gi√° sau gi·∫£m
//   },
// ];
export default function Page() {
  const router = useRouter();

  const [listLecture, setListLecture] = useState<lectureBlock[]>([]);
  const [listCourse, setListCourse] = useState<CourseForm[]>([]);
  console.log("üöÄ ~ Page ~ listCourse:", listCourse);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [paramsLecture, setParamsLecture] = useState({
    page: 1,
    limit: 10,
    search: undefined,
    specialty: undefined,
    is_approved: true,
  });

  const [paramsCourse, setParamsCourse] = useState({
    page: 1,
    limit: 10,
    search: undefined,
    category_slug: undefined,
    level: undefined,
    with_instructor: true,
  });

  const handleGetListLecture = async () => {
    try {
      const response = await APIGetListLecture(paramsLecture);
      if (response && response.data) {
        const data = response.data.map((item: any) => ({
          username: item?.user?.username,
          avatar: item?.user?.profile_image?.key,
          name: item?.user?.first_name + " " + item?.user?.last_name,
          rating: item?.rating || null,
          major: item?.category?.translations[0]?.name,
          description: item?.biography,
          numberCourse: item?.total_courses || null,
          numberStudent: item?.number_student || null,
        }));
        setListLecture(data);
      } else {
        setError("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu");
      }
    } catch (err) {
      console.error("Error during get list lecture:", err);
    }
  };

  const handleGetListCourse = async () => {
    try {
      const response = await APIGetListCourse(paramsCourse);
      if (response && response.data) {
        setListCourse(response.data);
      }
    } catch (err) {
      console.error("Error during get list course:", err);
    }
  };
  useEffect(() => {
    handleGetListLecture();
    handleGetListCourse();
  }, []);

  return (
    <div className="w-full min-h-screen bg-AntiFlashWhite dark:bg-eerieBlack text-richBlack dark:text-AntiFlashWhite font-sans overflow-x-hidden">
      {/* Hero Section */}

      <section className="relative overflow-hidden">
        <div className="bg-LavenderIndigo/50 w-full h-full overflow-hidden">
          <>
            <div
              className="absolute h-48 w-48 rounded-full bg-deepPink/20 blur-2xl md:h-96 md:w-96"
              style={{ top: "40%", right: "0%" }}
            />

            <div
              className="absolute h-48 w-48 rounded-full bg-deepPink/20 blur-2xl md:h-96 md:w-96"
              style={{ top: "60%", right: "40%" }}
            />

            <div
              className="absolute h-48 w-48 rounded-full bg-deepPink/20 blur-2xl md:h-96 md:w-96"
              style={{ top: "0%", right: "60%" }}
            />

            <div
              className="absolute h-48 w-48 rounded-full bg-white/70 blur-3xl md:h-96 md:w-96"
              style={{ top: "60%", right: "80%" }}
            />

            <div
              className="absolute h-48 w-48 rounded-full bg-white/70 blur-3xl md:h-96 md:w-96 z-0"
              style={{ top: "0%", right: "80%" }}
            />
            <div
              className="absolute h-48 w-48 rounded-full bg-white/70 blur-3xl md:h-96 md:w-96 z-0"
              style={{ top: "50%", right: "0%" }}
            />
          </>
          <div className="container mx-auto grid grid-cols-1 md:grid-cols-2 p-4 h-[calc(100vh-64px)] z-10">
            <div className="col-span-1  md:col-span-1 relative text-left flex flex-col md:justify-center w-full dark:text-white gap-2 items-center h-full md:text-left px-4  text-LavenderIndigo font-sans  z-20">
              <SplitText
                text="H·ªçc c√°c k·ªπ nƒÉng t·ª´ nh·ªØng gi·∫£ng vi√™n h√†ng ƒë·∫ßu c·ªßa ch√∫ng t√¥i"
                className="lg:text-[38px] text-left md:text-[24px] text-[20px] font-bold text-eerieBlack"
                delay={15}
                animationFrom={{
                  opacity: 0,
                  transform: "translate3d(0,50px,0)",
                }}
                animationTo={{ opacity: 1, transform: "translate3d(0,0,0)" }}
                threshold={0.2}
                rootMargin="-50px"
              />
              <SplitText
                text=" Gi·∫£ng vi√™n & chuy√™n gia ch·∫•t l∆∞·ª£ng cao, uy t√≠n, kinh nghi·ªám;"
                className="mt-2 lg:text-[16px] text-left md:text-[14px] text-[12px] md:text-black70 dark:text-white text-majorelleBlue"
                delay={10}
                animationFrom={{
                  opacity: 0,
                  transform: "translate3d(0,50px,0)",
                }}
                animationTo={{ opacity: 1, transform: "translate3d(0,0,0)" }}
                threshold={0.2}
                rootMargin="-50px"
              />
              <SplitText
                text="M√¥ h√¨nh h·ªçc t·∫≠p ƒëa d·∫°ng & ƒë·ªãnh h∆∞·ªõng k·∫øt qu·∫£ ƒë·∫ßu ra, t√≠ch h·ª£p c√¥ng ngh·ªá ti√™n ti·∫øn."
                className="mt-2 lg:text-[16px] text-left md:text-[14px] text-[12px] md:text-black70 dark:text-white text-majorelleBlue"
                delay={10}
                animationFrom={{
                  opacity: 0,
                  transform: "translate3d(0,50px,0)",
                }}
                animationTo={{ opacity: 1, transform: "translate3d(0,0,0)" }}
                threshold={0.2}
                rootMargin="-50px"
              />

              <div className="flex items-center gap-4">
                <Button
                  className="bg-custom-gradient-button-violet text-white hover:scale-105 transition-all duration-300 rounded-full px-6 py-3 font-semibold"
                  onClick={() => router.push("/course")}
                >
                  T√¨m kh√≥a h·ªçc
                  <ArrowRight className="ml-2 w-5 h-5" />
                </Button>
                <div className="flex items-center gap-2 text-white">
                  <Headset className="w-6 h-6 text-beautyGreen" />
                  <div>
                    <p className="text-sm dark:text-beautyGreen text-majorelleBlue opacity-80">
                      Hotline
                    </p>
                    <p className="font-bold dark:text-beautyGreen text-majorelleBlue ">
                      1900 1008
                    </p>
                  </div>
                </div>
              </div>
            </div>

            <div className="col-span-1 z-10">
              <img
                src="/images/home_bg.png"
                alt="dashboard_bg"
                className="w-full h-full object-cover"
              />
            </div>
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="container mx-auto gap-2 flex flex-col  md:absolute z-20 left-0 right-0 bottom-0 md:translate-y-[50%]">
        <div
          className="grid grid-cols-1 h-full md:grid-cols-4 gap-6"
          data-aos="fade-up"
        >
          <AnimateWrapper direction="up" amount={0.5}>
            <InfoDashboard
              number={10}
              title={"Gi·∫£ng vi√™n"}
              Icon={IdCard}
              color="#1568DF"
              bgColor="#1568DF"
            />
          </AnimateWrapper>
          <AnimateWrapper direction="up" amount={0.5}>
            <InfoDashboard
              number={2000}
              title={"B√†i h·ªçc"}
              Icon={BookCheck}
              color="#219653"
              bgColor="#219653"
            />
          </AnimateWrapper>
          <AnimateWrapper direction="up" amount={0.5}>
            <InfoDashboard
              number={100}
              title={"Sinh vi√™n"}
              Icon={GraduationCap}
              color="#9B51DF"
              bgColor="#9B51DF"
            />
          </AnimateWrapper>
          <AnimateWrapper direction="up" amount={0.5}>
            <InfoDashboard
              number={10}
              title={"Video"}
              Icon={Film}
              color="#FF2E2E"
              bgColor="#FF2E2E"
            />
          </AnimateWrapper>
        </div>
      </section>

      {/* About Section */}
      <section className="bg-white dark:bg-cosmicCobalt/10 py-16 pt-36">
        <div className="container mx-auto text-center" data-aos="fade-up">
          <AnimateWrapper delay={0.3} direction="up">
            <h2 className="text-3xl md:text-4xl font-bold text-cosmicCobalt dark:text-white mb-6">
              V·ªÅ ch√∫ng t√¥i
            </h2>
            <p className="text-darkSilver dark:text-lightSilver max-w-3xl mx-auto leading-relaxed">
              Ch√∫ng t√¥i cung c·∫•p c√°c kh√≥a h·ªçc k·∫øt h·ª£p l√Ω thuy·∫øt v√† th·ª±c h√†nh,
              ƒë∆∞·ª£c thi·∫øt k·∫ø b·ªüi ƒë·ªôi ng≈© chuy√™n gia h√†ng ƒë·∫ßu. M·ª•c ti√™u l√† mang
              l·∫°i gi√° tr·ªã th·ª±c ti·ªÖn cho h·ªçc vi√™n v√† doanh nghi·ªáp th√¥ng qua gi√°o
              d·ª•c ch·∫•t l∆∞·ª£ng cao.
            </p>
          </AnimateWrapper>
        </div>
      </section>

      <section className="relative bg-LavenderIndigo/50 w-screen h-full p-4 overflow-hidden">
        <div className="container mx-auto">
          <BlurColor />

          <div className="container mx-auto z-20">
            <AnimateWrapper delay={0.3} direction="up">
              <section className="container mx-auto py-16">
                <div className="flex items-center justify-between mb-8">
                  <h2 className="text-3xl z-10 font-bold text-cosmicCobalt dark:text-AntiFlashWhite">
                    Gi·∫£ng vi√™n ti√™u bi·ªÉu
                  </h2>
                  <Button
                    variant="link"
                    className="z-10 text-cosmicCobalt dark:text-AntiFlashWhite dark:hover:text-AntiFlashWhite/80 hover:text-majorelleBlue70"
                    onClick={() => router.push("/lecture")}
                  >
                    Xem t·∫•t c·∫£ <ChevronRight className="ml-1 w-4 h-4" />
                  </Button>
                </div>
                <div className="grid grid-cols-1 z-10 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                  {listLecture.slice(0, 4).map((lecture, index) => (
                    <FadeContent
                      key={index}
                      blur={true}
                      duration={100}
                      easing="ease-out"
                      initialOpacity={0}
                      className="transform transition-all hover:-translate-y-2"
                    >
                      <LecturersBlock {...lecture} />
                    </FadeContent>
                  ))}
                </div>
              </section>
            </AnimateWrapper>

            {/* Courses Section */}
            <AnimateWrapper delay={0.3} direction="up">
              <section className="py-16">
                <div className="container z-10 mx-auto">
                  <div className="flex items-center justify-between mb-8">
                    <h2 className="text-3xl z-10 font-bold text-cosmicCobalt dark:text-AntiFlashWhite">
                      Kh√≥a h·ªçc n·ªïi b·∫≠t
                    </h2>
                    <Button
                      variant="link"
                      className="z-10 text-cosmicCobalt dark:text-AntiFlashWhite dark:hover:text-AntiFlashWhite/80 hover:text-majorelleBlue70"
                      onClick={() => router.push("/course")}
                    >
                      Xem t·∫•t c·∫£ <ChevronRight className="ml-1 w-4 h-4" />
                    </Button>
                  </div>
                  <div className="grid z-10 grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                    {listCourse.slice(0, 4).map((course, index) => (
                      <FadeContent
                        key={index}
                        blur={true}
                        duration={100}
                        easing="ease-out"
                        initialOpacity={0}
                        className="transform transition-all hover:-translate-y-2"
                      >
                        <CoursesBlock {...course} />
                      </FadeContent>
                    ))}
                  </div>
                </div>
              </section>
            </AnimateWrapper>
          </div>
        </div>
      </section>

      {/* Lecturers Section */}

      {/* CTA Section */}
      <section className="bg-gradient-to-r from-majorelleBlue to-persianIndigo dark:text-white text-cosmicCobalt py-16">
        <div className="container mx-auto text-center" data-aos="zoom-in">
          <AnimateWrapper delay={0.3} direction="up">
            <h2 className="text-3xl md:text-4xl font-bold mb-4">
              S·∫µn s√†ng n√¢ng cao k·ªπ nƒÉng c·ªßa b·∫°n?
            </h2>
          </AnimateWrapper>
          <AnimateWrapper delay={0.3} direction="up">
            <p className="text-lg mb-6 max-w-2xl mx-auto text-darkSilver">
              Tham gia ngay h√¥m nay ƒë·ªÉ tr·∫£i nghi·ªám h·ªçc t·∫≠p ch·∫•t l∆∞·ª£ng t·ª´ ƒë·ªôi ng≈©
              gi·∫£ng vi√™n h√†ng ƒë·∫ßu.
            </p>
          </AnimateWrapper>
          <AnimateWrapper delay={0.3} direction="up">
            <Button
              className="bg-yankeesBlue text-white hover:bg-yankeesBlue/80 rounded-full px-8 py-3 font-semibold"
              onClick={() => router.push("/signup")}
            >
              B·∫Øt ƒë·∫ßu ngay <ArrowRight className="ml-2 w-5 h-5" />
            </Button>
          </AnimateWrapper>
        </div>
      </section>
    </div>
  );
}
